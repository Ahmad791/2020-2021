from os import replace
from sys import argv
import math

# Implement your code here #
def get_sum(lst):
    sum=0
    for i in lst:
        if("S" in i[0]):
            sum=sum+float(i[1])
    return sum

def add_tab(string):
    temp=""
    for line in string.split("\n"):
        temp=temp+"\t"+line+"\n"
    return temp

if __name__ == '__main__':

    input_grammar = argv[1]         # The name of the file that contains the probabilistic grammar
    input_sentences = argv[2]       # The name of the file that contains the input sentences (tests)
    output_trees = argv[3]          # The name of the output file

    grammer_input = open(input_grammar, "r")
    sentences=open(input_sentences,"r")
    output=open(output_trees,"w")

    # Implement your code here #
    
    grammer={}
    prob={}
    for law in grammer_input:#The making of the grammer
        law=law.split("->")
        grammer[law[1].replace("\n","").lstrip(' ')]=law[0].split(" ")[1]
        prob[law[1].replace("\n","").lstrip(' ')]=law[0].split(" ")[0]

    for sentence in sentences:
        output.write("\n\nSentence is: "+sentence+"\n\n")
        words=sentence.split(" ")
        for word in words:
            word.replace("\n","")
        matrix=[]
        x=[]
        for j in range(0, len(words)):#prepare the matrix
            for i in range(0, j+1):
                x.append(["",0,[],""])#0. grammer 1. probability 2. Other viable trees 3. printing purpose
            matrix.append(x)
            x=[]
        
        for j in range(0, len(words)):
            for i in range(j, -1,-1):
                words[j]=words[j].replace("\n","")
                if words[j] not in grammer:
                        print(words[j]+" error")
                else:   
                    if j==i:
                        matrix[j][i][0]=grammer[words[j]]
                        matrix[j][i][1]=float(prob[words[j]])
                        matrix[j][i][2].append([grammer[words[j]],prob[words[j]],[grammer[words[j]],prob[words[j]],[],grammer[words[j]]+">"+words[j]],"\t"+grammer[words[j]]+">"+words[j]])
                        matrix[j][i][3]="\t"+grammer[words[j]]+">"+words[j]
                    else: 
                        for k in range(j,i,-1):
                            x_index=matrix[k-1][i]
                            y_index=matrix[j][k]
                            for num1 in range(0,len(x_index[2])):
                                for num2 in range(0,len(y_index[2])):
                                    law=''
                                    if (x_index[2][num1][0]+" "+y_index[2][num2][0]) in prob:#check if there is a grammer that fits
                                        law=x_index[2][num1][0]+" "+y_index[2][num2][0]
                                    if law!='':
                                        temp=float(y_index[2][num2][1])*float(x_index[2][num1][1])*float(prob[law])
                                        matrix[j][i][2].append([grammer[law],temp,[],grammer[law]+">"+law+" \n "+add_tab(x_index[2][num1][3]+"\n"+y_index[2][num2][3])])#save every viable tree
                                        if temp>float(matrix[j][i][1]):#save the best tree
                                            matrix[j][i][1]=temp
                                            matrix[j][i][0]=(grammer[law])
                                            matrix[j][i][3]=grammer[law]+">"+law+" \n "+add_tab(x_index[2][num1][3]+"\n"+y_index[2][num2][3])

                                        
        sum=get_sum(matrix[len(matrix)-1][0][2])
        if sum!=0:
            output.write("Parsing")
            output.write(matrix[len(matrix)-1][0][3])
            output.write("Log Probability:"+str(math.log(sum)))
        else:
            output.write("*** This sentence is not a member of the language generated by the grammar***")
        
        
    



